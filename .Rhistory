col_datetime(format = "%Y-%m-%d %H:%M:%S:"),     # Time
col_character(),    # Tube
col_integer(),      # P1 work time in ms
col_integer(),      # P2 work time in ms
col_factor(levels = c(1, 2, 3, 4)),       # Zone number
col_factor(),       # Activated mode
col_double(),       # Average OD on previous interval
col_integer(),      # Concentration in the tube
col_integer(),      # Concentration in bottle 1
col_integer(),      # Concentration in bottle 2
col_double(),       # Lower threshold
col_double(),       # Dilution threshold
col_double()       # Upper threshold
)
) %>% filter(!is.na(avg_od))          # Filter out system messages
pump_log
})
#### ggplot2 OD-Concentration plots generation for each tube ####
plot_tube = function(pump_log, t){
selected_tube = (str_c("Tube", as.character(t)))
pump_log.t = pump_log %>% filter(tube == selected_tube)
if( input$MICUnits ){
max_conc = max(pump_log.t$TubeC / input$MIC)
}else{
max_conc = max(pump_log.t$TubeC)
}
max_od = max(pump_log.t$avg_od)
plot = pump_log.t %>% ggplot(aes(time, lag(avg_od))) +
geom_line(color = "#666666", size = 1)
if( input$MICUnits ){
plot = plot + geom_step(aes(y = TubeC / input$MIC / max_conc * max_od), color = "#4daf4a", size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.* max_conc/max_od , name = "Concentration, xMIC"))
}else{
plot = plot + geom_step(aes(y = TubeC / max_conc * max_od), color = "#4daf4a", size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.* max_conc/max_od , name = "Concentration"))
}
plot = plot +
geom_point(aes(fill = mode, shape = zone), size = 3) +
theme_bw() +
#scale_fill_brewer(palette = "Dark2") +
scale_fill_manual(values = c('0' = "#1B9E77", '1' = "#E7298A", '2' = "#7570B3", '3' = "#E6AB02"), labels = c('Fresh media', 'Drug', 'Step mode', 'Fresh media in drug zone'), name = 'Dilution mode') +
scale_shape_manual(values = c('1' = 21, '2' = 22, '3' = 24, '4' = 25), labels = c('Low OD', 'Growth support', 'Drug treatment logic', 'Overgrow prevention dilution'), name = 'Dilution type') +
guides(fill = guide_legend(override.aes=list(shape=21))) +
labs(x = "Time", y = "OD") +
ggtitle(str_c("Reactor ", as.character(t)))
if(input$LT){
plot = plot + geom_line(color = "#a6cee3", size = 1, linetype = "dashed", aes(time, lag(LT)))
}
if(input$DT){
plot = plot + geom_line(color = "#fb9a99", size = 1, linetype = "dashed", aes(time, lag(DT)))
}
if(input$UT){
plot = plot + geom_line(color = "#cab2d6", size = 1, linetype = "dashed", aes(time, lag(UT)))
}
return(plot)
}
#### Plotly pump usage plots ####
plot_pump = function(pump_log, reg_h, ext_h){
# reg_h - how many hours to take for regression
# ext_h - for how many hours exrapolate
hour0 = as.POSIXct(pump_log$time)[1]
pump_log = pump_log %>% mutate(P1 = P1 / 1000 * 0.3)
pump_log = pump_log %>% mutate(P2 = P2 / 1000 * 0.3)
pump_log = pump_log %>% mutate(p1_usage = cumsum(P1), p2_usage = cumsum(P2), hours = as.numeric(as.POSIXct(time) - hour0, units = "hours"))
p1_last = tail(pump_log$p1_usage, 1)
p2_last = tail(pump_log$p2_usage, 1)
ext_lm_p1 = lm(p1_usage ~ hours, data = pump_log[pump_log$hours > tail(pump_log$hours, 1) - reg_h,])
ext_lm_p2 = lm(p2_usage ~ hours, data = pump_log[pump_log$hours > tail(pump_log$hours, 1) - reg_h,])
usage_predictions = tibble(hours = seq(tail(pump_log$hours, 1), tail(pump_log$hours, 1) + ext_h, 1))
usage_predictions = usage_predictions %>% add_predictions(ext_lm_p1, 'p1_usage')
usage_predictions = usage_predictions %>% add_predictions(ext_lm_p2, 'p2_usage')
p1_usage_pred_first = usage_predictions$p1_usage[1]
p2_usage_pred_first = usage_predictions$p2_usage[1]
usage_predictions = usage_predictions %>% mutate(p1_usage = p1_usage - p1_usage_pred_first + p1_last, p2_usage = p2_usage - p2_usage_pred_first + p2_last)
output$pred_p1_vol = renderText({str_c("Estimated volume that should be in Pump 1 for ", ext_h, "hours: ", round(tail(usage_predictions$p1_usage, 1) - p1_last, 0), " mL")})
output$pred_p2_vol = renderText({str_c("Estimated volume that should be in Pump 2 for ", ext_h, "hours: ", round(tail(usage_predictions$p2_usage, 1) - p2_last, 0), " mL")})
usage_plot = pump_log %>% plot_ly(type = 'scatter', mode = 'lines+markers') %>%
add_trace(x = ~hours, y = ~round(p1_usage, 0), name = 'Media 1 usage', mode = 'lines') %>%
add_trace(x = ~hours, y = ~round(p2_usage, 0), name = 'Media 2 usage', mode = 'lines') %>%
add_trace(data = usage_predictions, x = ~hours, y = ~round(p1_usage, 0), name = 'Media 1 usage predictions', mode = 'lines', line = list(dash = 'dot')) %>%
add_trace(data = usage_predictions, x = ~hours, y = ~round(p2_usage, 0), name = 'Media 2 usage predictions', mode = 'lines', line = list(dash = 'dot')) %>%
layout(title = "Media usage and predictions", xaxis = list(title = "Time, h"), yaxis = list(title = "Media used, mL"))
#usage_plot = plot_ly(cars, x = ~speed, y = ~dist, type = 'scatter', mode = 'lines+markers')
usage_plot
}
#### Outputs #####
output$pump_usage = renderPlotly(plot_pump(pumpLogR(), input$reg_hours, input$reg_projection))
output$tube1 = renderPlot(plot_tube(pumpLogR(), 1))
output$tube2 = renderPlot(plot_tube(pumpLogR(), 2))
output$tube3 = renderPlot(plot_tube(pumpLogR(), 3))
output$tube4 = renderPlot(plot_tube(pumpLogR(), 4))
output$tube5 = renderPlot(plot_tube(pumpLogR(), 5))
output$tube6 = renderPlot(plot_tube(pumpLogR(), 6))
}
shinyApp(ui, server)
}
runApp('~/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/Morbidostat2/Plot_Log_Gui_M2/Plot_GUI')
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/SOP_drugs/AB_CST_1_2020-07-28/Logs')
library(tidyverse)
Volume_to_C = 4 / 13332
V = 20
locale = locale(tz = "UTC")
# Set Pump Log (check if you need to skip header), dilution factor (Vsubstituted/Vtube), date of missed dilution
init_tbl = read_tsv('PumpsLog1.txt',
col_names = c("Date", "Tube", "TimeL", "TimeH", "zone", "mode", "avg_od", "TubeC", "C1", "C2", "LT", "DT", "UT"),
col_types = list(
col_datetime(format = "%Y-%m-%d %H:%M:%S:"),     # Time
col_character(),    # Tube
col_integer(),      # P1 work time in ms
col_integer(),      # P2 work time in ms
col_factor(levels = c(1, 2, 3, 4)),       # Zone number
col_factor(),       # Activated mode
col_double(),       # Average OD on previous interval
col_integer(),      # Concentration in the tube
col_integer(),      # Concentration in bottle 1
col_integer(),      # Concentration in bottle 2
col_double(),       # Lower threshold
col_double(),       # Dilution threshold
col_double()       # Upper threshold
)
) %>% filter(!is.na(avg_od))          # Filter out system messages)
d_factor = matrix(c(rep(0.5, 6), rep(0.5, 6), rep(0.5, 6), c(0.5, 0, 0, 0.5, 0.5 , 0.5), c(0.5, 0.5, 0.5, 0, 0, 0)), ncol = 6, byrow = T)
date_of_missed_dilution = parse_datetime(c('2020-07-29 10:00:00:', '2020-07-30 11:30:00:', '2020-07-30 22:10:00:', '2020-07-31 14:51:00:', '2020-07-31 18:33:00:'), format = "%Y-%m-%d %H:%M:%S:")
# Correcting C2 1000 -> 1560
init_tbl$C2[init_tbl$Date > parse_datetime('2020-07-30 22:10')] = 320000
for(missed_point_i in seq_along(date_of_missed_dilution)){
correct_part_tbl = init_tbl %>% filter(Date <= date_of_missed_dilution[missed_point_i])
messed_part_tbl = init_tbl %>% filter(Date > date_of_missed_dilution[missed_point_i])
messed_part_tbl$RC = 0
fixed_part_tbl = messed_part_tbl %>% filter(row_number() < 1)
for(tube_n in 1:6){
tube_tbl = messed_part_tbl %>% filter(Tube == str_c('Tube', tube_n))
tube_tbl$RC[1] = tube_tbl$TubeC[1] * d_factor[missed_point_i, tube_n]
for(row in seq_along(tube_tbl$RC)[-1]){
dV = (tube_tbl$TimeH[row] + tube_tbl$TimeL[row]) * Volume_to_C
Ccur = (tube_tbl$TimeH[row] * tube_tbl$C2[row] + tube_tbl$TimeL[row] * tube_tbl$C1[row]) / (tube_tbl$TimeH[row] + tube_tbl$TimeL[row])
tube_tbl$RC[row] = (tube_tbl$RC[row-1] * (V - dV) + Ccur * dV) / V
}
fixed_part_tbl = rbind(fixed_part_tbl, tube_tbl)
}
correct_part_tbl$RC = correct_part_tbl$TubeC
init_tbl = rbind(correct_part_tbl, fixed_part_tbl)
#  dC_plot = init_tbl %>%
#    mutate(dC = RC - TubeC) %>%
#    ggplot(aes(Date, dC, color = Tube)) + geom_line()
#  plot(dC_plot)
}
init_tbl %>% mutate(TubeC = as.integer(RC), Date = str_c(as.character(Date), ":")) %>% select(-RC) %>% arrange(Date) %>% write.table('Pump_log_fixed.txt', row.names = F, col.names = F, quote = F, sep = '\t')
runApp('~/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/Morbidostat2/Plot_Log_Gui_M2/Plot_GUI')
init_tbl
View(tube_tbl)
View(init_tbl)
messed_part_tbl
fixed_part_tbl
tube_n
missed_point_i
d_factor[missed_point_i, tube_n]
d_factor
tube_tbl$RC
Volume_to_C
Ccur
runApp('~/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/Morbidostat2/Plot_Log_Gui_M2/Plot_GUI')
init_tbl
View(init_tbl)
init_tbl %>% mutate(TubeC = as.integer(RC), Date = str_c(as.character(Date), ":"))
runApp('~/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/Morbidostat2/Plot_Log_Gui_M2/Plot_GUI')
correct_part_tbl
correct_part_tbl
fixed_part_tbl
View(correct_part_tbl)
library(tidyverse)
Volume_to_C = 4 / 13332
V = 20
locale = locale(tz = "UTC")
# Set Pump Log (check if you need to skip header), dilution factor (Vsubstituted/Vtube), date of missed dilution
init_tbl = read_tsv('PumpsLog1.txt',
col_names = c("Date", "Tube", "TimeL", "TimeH", "zone", "mode", "avg_od", "TubeC", "C1", "C2", "LT", "DT", "UT"),
col_types = list(
col_datetime(format = "%Y-%m-%d %H:%M:%S:"),     # Time
col_character(),    # Tube
col_integer(),      # P1 work time in ms
col_integer(),      # P2 work time in ms
col_factor(levels = c(1, 2, 3, 4)),       # Zone number
col_factor(),       # Activated mode
col_double(),       # Average OD on previous interval
col_integer(),      # Concentration in the tube
col_integer(),      # Concentration in bottle 1
col_integer(),      # Concentration in bottle 2
col_double(),       # Lower threshold
col_double(),       # Dilution threshold
col_double()       # Upper threshold
)
) %>% filter(!is.na(avg_od))          # Filter out system messages)
d_factor = matrix(c(rep(0.5, 6), rep(0.5, 6), rep(0.5, 6), c(0.5, 0, 0, 0.5, 0.5 , 0.5), c(0.5, 0.5, 0.5, 0, 0, 0)), ncol = 6, byrow = T)
date_of_missed_dilution = parse_datetime(c('2020-07-29 10:00:00:', '2020-07-30 11:30:00:', '2020-07-30 22:10:00:', '2020-07-31 14:51:00:', '2020-07-31 18:33:00:'), format = "%Y-%m-%d %H:%M:%S:")
# Correcting C2 1000 -> 1560
init_tbl$C2[init_tbl$Date > parse_datetime('2020-07-30 22:10')] = 320000
for(missed_point_i in seq_along(date_of_missed_dilution)){
correct_part_tbl = init_tbl %>% filter(Date <= date_of_missed_dilution[missed_point_i])
messed_part_tbl = init_tbl %>% filter(Date > date_of_missed_dilution[missed_point_i])
messed_part_tbl$RC = 0
fixed_part_tbl = messed_part_tbl %>% filter(row_number() < 1)
for(tube_n in 1:6){
tube_tbl = messed_part_tbl %>% filter(Tube == str_c('Tube', tube_n))
tube_tbl$RC[1] = tube_tbl$TubeC[1] * d_factor[missed_point_i, tube_n]
for(row in seq_along(tube_tbl$RC)[-1]){
dV = (tube_tbl$TimeH[row] + tube_tbl$TimeL[row]) * Volume_to_C
Ccur = (tube_tbl$TimeH[row] * tube_tbl$C2[row] + tube_tbl$TimeL[row] * tube_tbl$C1[row]) / (tube_tbl$TimeH[row] + tube_tbl$TimeL[row])
tube_tbl$RC[row] = (tube_tbl$RC[row-1] * (V - dV) + Ccur * dV) / V
}
fixed_part_tbl = rbind(fixed_part_tbl, tube_tbl)
}
correct_part_tbl$RC = correct_part_tbl$TubeC
init_tbl = rbind(correct_part_tbl, fixed_part_tbl)
init_tbl$TubeC = as.integer(init_tbl$RC)
#  dC_plot = init_tbl %>%
#    mutate(dC = RC - TubeC) %>%
#    ggplot(aes(Date, dC, color = Tube)) + geom_line()
#  plot(dC_plot)
}
init_tbl %>% mutate(TubeC = as.integer(RC), Date = str_c(as.character(Date), ":")) %>% select(-RC) %>% arrange(Date) %>% write.table('Pump_log_fixed.txt', row.names = F, col.names = F, quote = F, sep = '\t')
runApp('~/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/Morbidostat2/Plot_Log_Gui_M2/Plot_GUI')
setwd('')
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/MCP/Run 3280-2_2020-01-06/Logs')
library(tidyverse)
Volume_to_C = 4 / 13332
V = 20
locale = locale(tz = "UTC")
# Set Pump Log (check if you need to skip header), dilution factor (Vsubstituted/Vtube), date of missed dilution
init_tbl = read_tsv('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/MCP/Run 3280-2_2020-01-06/Logs/PumpsLog.txt',
col_names = c("Date", "Tube", "TimeL", "TimeH", "zone", "mode", "avg_od", "TubeC", "C1", "C2", "LT", "DT", "UT"),
col_types = list(
col_datetime(format = "%Y-%m-%d %H:%M:%S:"),     # Time
col_character(),    # Tube
col_integer(),      # P1 work time in ms
col_integer(),      # P2 work time in ms
col_factor(levels = c(1, 2, 3, 4)),       # Zone number
col_factor(),       # Activated mode
col_double(),       # Average OD on previous interval
col_integer(),      # Concentration in the tube
col_integer(),      # Concentration in bottle 1
col_integer(),      # Concentration in bottle 2
col_double(),       # Lower threshold
col_double(),       # Dilution threshold
col_double()       # Upper threshold
)
) %>% filter(!is.na(avg_od))          # Filter out system messages)
d_factor = c(0.25, 0.5, 0.5)
date_of_missed_dilution = parse_datetime(c('2020-06-02 10:20:00:','2020-06-02 18:50:00:', '2020-06-03 10:45:00:'), format = "%Y-%m-%d %H:%M:%S:")
# Correcting C2 1000 -> 1560
init_tbl$C2[init_tbl$C2 == 1000] = 1560
for(missed_point_i in seq_along(date_of_missed_dilution)){
correct_part_tbl = init_tbl %>% filter(Date <= date_of_missed_dilution[missed_point_i])
messed_part_tbl = init_tbl %>% filter(Date > date_of_missed_dilution[missed_point_i])
messed_part_tbl$RC = 0
fixed_part_tbl = messed_part_tbl %>% filter(row_number() < 1)
for(tube_n in 1:6){
tube_tbl = messed_part_tbl %>% filter(Tube == str_c('Tube', tube_n))
tube_tbl$RC[1] = tube_tbl$TubeC[1] * d_factor[missed_point_i]
for(row in seq_along(tube_tbl$RC)[-1]){
dV = (tube_tbl$TimeH[row] + tube_tbl$TimeL[row]) * Volume_to_C
Ccur = (tube_tbl$TimeH[row] * tube_tbl$C2[row] + tube_tbl$TimeL[row] * tube_tbl$C1[row]) / (tube_tbl$TimeH[row] + tube_tbl$TimeL[row])
tube_tbl$RC[row] = (tube_tbl$RC[row-1] * (V - dV) + Ccur * dV) / V
}
fixed_part_tbl = rbind(fixed_part_tbl, tube_tbl)
}
correct_part_tbl$RC = correct_part_tbl$TubeC
init_tbl = rbind(correct_part_tbl, fixed_part_tbl)
init_tbl$TubeC = as.integer(init_tbl$RC)
#  dC_plot = init_tbl %>%
#    mutate(dC = RC - TubeC) %>%
#    ggplot(aes(Date, dC, color = Tube)) + geom_line()
#  plot(dC_plot)
}
init_tbl %>% mutate(TubeC = as.integer(RC), Date = str_c(as.character(Date), ":")) %>% select(-RC) %>% arrange(Date) %>% write.table('Pump_log_fixed.txt', row.names = F, col.names = F, quote = F, sep = '\t')
library(plotly)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(RColorBrewer)
library(modelr)
library(stringr)
pump_log_file = '/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/MCP/Run 3280-2_2020-01-06/Logs/Pump_log_fixed.txt'
pump_log = read_tsv(
pump_log_file,
col_names = c("time", "tube", "P1", "P2", "zone", "mode", "avg_od", "TubeC", "C1", "C2", "LT", "DT", "UT"),
col_types = list(
col_datetime(format = "%Y-%m-%d %H:%M:%S:"),     # Time
col_character(),    # Tube
col_integer(),      # P1 work time in ms
col_integer(),      # P2 work time in ms
col_factor(levels = c(1, 2, 3, 4)),       # Zone number
col_factor(),       # Activated mode
col_double(),       # Average OD on previous interval
col_integer(),      # Concentration in the tube
col_integer(),      # Concentration in bottle 1
col_integer(),      # Concentration in bottle 2
col_double(),       # Lower threshold
col_double(),       # Dilution threshold
col_double()       # Upper threshold
)
) %>% filter(!is.na(avg_od))          # Filter out system messages
for(t in 1:6){
selected_tube = (str_c("Tube", as.character(t)))
pump_log.t = pump_log %>% filter(tube == selected_tube)
start_time = pump_log.t$time[1]
pump_log.t$time = as.numeric(pump_log.t$time - start_time, units = 'hours')
max_conc = max(pump_log.t$TubeC)
max_od = max(pump_log.t$avg_od)
plot = pump_log.t %>% ggplot(aes(time, lag(avg_od))) +
geom_line(color = "#666666", size = 1)
plot = plot + geom_step(aes(y = TubeC / max_conc * max_od), color = "#4daf4a", size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.* max_conc/max_od , name = "Concentration"))
plot = plot +
geom_point(aes(fill = mode, shape = zone), size = 3) +
theme_bw() +
#scale_fill_brewer(palette = "Dark2") +
scale_fill_manual(values = c('0' = "#1B9E77", '1' = "#E7298A", '2' = "#7570B3", '3' = "#E6AB02"), labels = c('Fresh media', 'Drug', 'Step mode', 'Fresh media in drug zone'), name = 'Dilution mode') +
scale_shape_manual(values = c('1' = 21, '2' = 22, '3' = 24, '4' = 25), labels = c('Low OD', 'Growth support', 'Drug treatment logic', 'Overgrow prevention dilution'), name = 'Dilution type') +
guides(fill = guide_legend(override.aes=list(shape=21))) +
labs(x = "Time, h", y = "OD") +
ggtitle(str_c("Reactor ", as.character(t)))
ggsave(str_c(selected_tube, ".pdf"), width = 10, height = 6)
}
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/SOP_drugs/AB_CST_1_2020-07-28/Plots')
library(plotly)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(RColorBrewer)
library(modelr)
library(stringr)
pump_log_file = '/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/SOP_drugs/AB_CST_1_2020-07-28/Logs/Pump_log_fixed.txt'
pump_log = read_tsv(
pump_log_file,
col_names = c("time", "tube", "P1", "P2", "zone", "mode", "avg_od", "TubeC", "C1", "C2", "LT", "DT", "UT"),
col_types = list(
col_datetime(format = "%Y-%m-%d %H:%M:%S:"),     # Time
col_character(),    # Tube
col_integer(),      # P1 work time in ms
col_integer(),      # P2 work time in ms
col_factor(levels = c(1, 2, 3, 4)),       # Zone number
col_factor(),       # Activated mode
col_double(),       # Average OD on previous interval
col_integer(),      # Concentration in the tube
col_integer(),      # Concentration in bottle 1
col_integer(),      # Concentration in bottle 2
col_double(),       # Lower threshold
col_double(),       # Dilution threshold
col_double()       # Upper threshold
)
) %>% filter(!is.na(avg_od))          # Filter out system messages
for(t in 1:6){
selected_tube = (str_c("Tube", as.character(t)))
pump_log.t = pump_log %>% filter(tube == selected_tube)
start_time = pump_log.t$time[1]
pump_log.t$time = as.numeric(pump_log.t$time - start_time, units = 'hours')
max_conc = max(pump_log.t$TubeC)
max_od = max(pump_log.t$avg_od)
plot = pump_log.t %>% ggplot(aes(time, lag(avg_od))) +
geom_line(color = "#666666", size = 1)
plot = plot + geom_step(aes(y = TubeC / max_conc * max_od), color = "#4daf4a", size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.* max_conc/max_od , name = "Concentration"))
plot = plot +
geom_point(aes(fill = mode, shape = zone), size = 3) +
theme_bw() +
#scale_fill_brewer(palette = "Dark2") +
scale_fill_manual(values = c('0' = "#1B9E77", '1' = "#E7298A", '2' = "#7570B3", '3' = "#E6AB02"), labels = c('Fresh media', 'Drug', 'Step mode', 'Fresh media in drug zone'), name = 'Dilution mode') +
scale_shape_manual(values = c('1' = 21, '2' = 22, '3' = 24, '4' = 25), labels = c('Low OD', 'Growth support', 'Drug treatment logic', 'Overgrow prevention dilution'), name = 'Dilution type') +
guides(fill = guide_legend(override.aes=list(shape=21))) +
labs(x = "Time, h", y = "OD") +
ggtitle(str_c("Reactor ", as.character(t)))
ggsave(str_c(selected_tube, ".pdf"), width = 10, height = 6)
}
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task36 (MM_Projects)/Salmonella_pangenome')
library(tidyverse)
#' Bovismorbificans
#' Choleraesuis
#' Typhimurium
#' Dublin
#' Enteritidis
b_tbl = read_tsv('PATRIC_tables/Bovismorbificans.txt', col_types=cols(`Genome Name` = col_character(), 'Genome ID' = col_character(), Serovar = col_character(), .default = col_double()))
b_tbl = b_tbl %>% select(`Genome Name`, `Genome ID`, `Genome Length`, `GC Content`, `PATRIC CDS`) %>% mutate(take = str_detect(`Genome Name`, 'Bovismorbificans'))
b_tbl$Serovar = 'Bovismorbificans'
c_tbl = read_tsv('PATRIC_tables/Choleraesuis.txt', col_types=cols(`Genome Name` = col_character(), 'Genome ID' = col_character(), Serovar = col_character(), .default = col_double()))
c_tbl = c_tbl %>% select(`Genome Name`, `Genome ID`, `Genome Length`, `GC Content`, `PATRIC CDS`) %>% mutate(take = str_detect(`Genome Name`, 'Choleraesuis'))
c_tbl$Serovar = 'Choleraesuis'
t_tbl = read_tsv('PATRIC_tables/Typhimurium.txt', col_types=cols(`Genome Name` = col_character(), 'Genome ID' = col_character(), Serovar = col_character(), .default = col_double()))
t_tbl = t_tbl %>% select(`Genome Name`, `Genome ID`, `Genome Length`, `GC Content`, `PATRIC CDS`) %>% mutate(take = str_detect(`Genome Name`, 'Typhimurium'))
t_tbl$Serovar = 'Typhimurium'
d_tbl = read_tsv('PATRIC_tables/Dublin.txt', col_types=cols(`Genome Name` = col_character(), 'Genome ID' = col_character(), Serovar = col_character(), .default = col_double()))
d_tbl = d_tbl %>% select(`Genome Name`, `Genome ID`, `Genome Length`, `GC Content`, `PATRIC CDS`) %>% mutate(take = str_detect(`Genome Name`, 'Dublin'))
d_tbl$Serovar = 'Dublin'
e_tbl = read_tsv('PATRIC_tables/Enteritidis.txt', col_types=cols(`Genome Name` = col_character(), 'Genome ID' = col_character(), Serovar = col_character(), .default = col_double()))
e_tbl = e_tbl %>% select(`Genome Name`, `Genome ID`, `Genome Length`, `GC Content`, `PATRIC CDS`) %>% mutate(take = str_detect(`Genome Name`, 'Enteritidis'))
e_tbl$Serovar = 'Enteritidis'
tbl = rbind(b_tbl, c_tbl, t_tbl, d_tbl, e_tbl)
tbl %>% filter(take) %>% ggplot() + geom_histogram(aes(`Genome Length`, fill = Serovar), position = 'identity')
tbl
tbl %>% filter(take)
tbl %>% filter(take) %>% ggplot() + geom_histogram(aes(`Genome Length`, fill = Serovar), position = 'identity') + scale_x_continuous(limits = c(4*10^6, 6*10^6))
tbl %>% filter(take) %>% filter(`Genome Length` > 4*10^6, `Genome Length` < 6*10^6) %>% ggplot() + geom_histogram(aes(`Genome Length`, fill = Serovar), position = 'identity')
tbl %>% filter(take) %>% filter(`Genome Length` > 4*10^6, `Genome Length` < 6*10^6) %>% ggplot() + geom_histogram(aes(`Genome Length`, fill = Serovar), position = 'identity', alpha = 0.5)
tbl %>% filter(take) %>% filter(`Genome Length` > 4*10^6, `Genome Length` < 6*10^6) %>% ggplot() + geom_histogram(aes(`Genome Length`, fill = Serovar), position = 'stack', alpha = 0.5)
tbl %>% filter(take) %>% filter(`Genome Length` > 4*10^6, `Genome Length` < 6*10^6) %>% ggplot() + geom_histogram(aes(`Genome Length`, fill = Serovar), position = 'identity') + facet_grid(Serovar ~ .)
tbl %>% filter(take) %>% filter(`Genome Length` > 4*10^6, `Genome Length` < 6*10^6) %>% select(-take) %>% write_tsv('genomes.txt')
library(tidyverse)
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/Forge/FG_EC-1/Sequencing_community/collapsed_variant')
selected = read_tsv('selected.txt')
ls()
rm(ls())
rm(list=ls())
selected = read_tsv('selected.txt')
View(selected)
colnames(selected)
selected %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag')) %>% group_by(Gene, ID, Annotation) %>% summarise_all(sum)
selected %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarise_all(sum)
selected %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarise_all(sum) %>% write_tsv('collapsed.txt')
selected %>% filter(Mutation != 'synonymous_variant') %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarise_all(sum) %>% write_tsv('collapsed.txt')
library(tidyverse)
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/Forge/FG_EC-1/Sequencing_community/collapsed_variant')
selected = read_tsv('selected.txt')
selected %>% filter(Mutation != 'synonymous_variant') %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarise_all(sum, n) %>% write_tsv('collapsed.txt')
library(tidyverse)
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/Forge/FG_EC-1/Sequencing_community/collapsed_variant')
selected = read_tsv('selected.txt')
selected %>% filter(Mutation != 'synonymous_variant') %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarise_all(sum) %>% write_tsv('collapsed.txt')
library(tidyverse)
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/Forge/FG_EC-1/Sequencing_community/collapsed_variant')
selected = read_tsv('selected.txt')
selected %>% filter(Mutation != 'synonymous_variant') %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarise_all(sum, n()) %>% write_tsv('collapsed.txt')
library(tidyverse)
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/Forge/FG_EC-1/Sequencing_community/collapsed_variant')
selected = read_tsv('selected.txt')
selected %>% filter(Mutation != 'synonymous_variant') %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarise_all(list(sum, n)) %>% write_tsv('collapsed.txt')
n = selected %>% filter(Mutation != 'synonymous_variant') %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarize(N = n())
selected = read_tsv('selected.txt')
n = selected %>% filter(Mutation != 'synonymous_variant') %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarize(N = n())
n
library(tidyverse)
setwd('/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/!Runs/Antibiotics/Forge/FG_EC-1/Sequencing_community/collapsed_variant')
selected = read_tsv('selected.txt')
n = selected %>% filter(Mutation != 'synonymous_variant') %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarize(N = n())
collapsed = selected %>% filter(Mutation != 'synonymous_variant') %>% select(-c('MAX', 'N', 'IN_A', 'IN_2DF', 'Effect', 'Locus Tag', 'Mutation')) %>% group_by(Gene, ID, Annotation) %>% summarise_all(sum)
left_join(collapsed, n, by = c('Gene', 'ID', 'Annotation'))%>% write_tsv('collapsed.txt')
rm(list=ls())
library(MoRbido)
#start in the MoRbido directory
setwd("/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/MoRbido")
#install.packages('rlist')
#install.packages('roxygen2')
#install.packages('devtools')
library(roxygen2)
library(devtools)
document()
setwd("..")
install("MoRbido")
install.packages('devtools')
library(roxygen2)
library(devtools)
document()
setwd("..")
install("MoRbido")
#start in the MoRbido directory
setwd("/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/MoRbido")
document()
setwd("..")
install("MoRbido")
install.packages('ggrepel')
install("MoRbido")
document()
setwd("..")
install("MoRbido")
#start in the MoRbido directory
setwd("/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/MoRbido")
document()
setwd("..")
install("MoRbido")
.Last.error.trace
#start in the MoRbido directory
setwd("/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/MoRbido")
#install.packages('rlist')
#install.packages('roxygen2')
#install.packages('devtools')
#install.packages('ggrepel')
library(roxygen2)
library(devtools)
document()
setwd("..")
install("MoRbido")
#start in the MoRbido directory
setwd("/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/MoRbido")
#install.packages('rlist')
#install.packages('roxygen2')
#install.packages('devtools')
#install.packages('ggrepel')
library(roxygen2)
library(devtools)
document()
setwd("..")
install("MoRbido")
#start in the MoRbido directory
setwd("/Users/semenleyn/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/MoRbido")
#install.packages('rlist')
#install.packages('roxygen2')
#install.packages('devtools')
#install.packages('ggrepel')
library(roxygen2)
library(devtools)
document()
