{
    "collab_server" : "",
    "contents" : "#' Draw OD/time and Concentration/time curves.\n#' @param tables - List of tables that were created by \\emph{calaculate_tables} function.\n#' @param c.units - Text variable that specifies concentration units.\n#' @param MIC - Minimum Inhibitory Concentration.\n#' @param log2 - Should the Concentration axes transformed with log2 transformation? Default value is TRUE (log2 coordinates).\n#' @param p.size - Size of points on the OD plot.\n#' @param add.model - If mutation dynamics modelling was made with the \\emph{mutability} function TRUE value will add this model to OD plot. Default value is FALSE.\n#' @param model.table - Table with the model dynamics produced by \\emph{mutability} function. Could be omitted if \\strong{add.model == FALSE}.\n#' @param m.prob - Mutation probability. Could be omitted if \\strong{add.model == FALSE}. Calculated inside the \\emph{calaculate_tables} function.\n#' @param params - information about dilutions and bottle changes geneated by \\emph{get_draw_parameters}\n#' @param dist - distance between lines indicated sample collections or bottle changes and text\n\n#' @export\n\n#' @import ggplot2\n#' @import gtable\n#' @import grid\n\ndraw <- function(tables, c.units=\"uM\", MIC=0.016, log2=T, p.size = 0.5, add.model = F, model.table = data.frame(), m.prob = \"\", params = list(), dist = 1){\n  #if log2==T, then concentration is shown as log2 of xMIC. Else - in linear coordinates in c.units\n  #tables - list of lists with tables of concentration and OD\n  #p.size - size of points on the OD plot\n  if( length(params) != 0 ){\n    params[['bcs']]$time = params[['bcs']]$time / 3600\n    params[['dils']]$time = params[['dils']]$time / 3600\n  }\n\n  for(i in 1:length(tables)){\n    tV <- tables[i][[1]][1]$OD\n    tC <- tables[i][[1]][2]$Conc\n    maxCS <- max(tC$Concentration)\n    tC$time <- tC$time/3600   #converts time to hours\n    tV$time <- tV$time/3600\n    tube <- names(tables)[i]\n    if( log2 == F){\n      tplotC <- ggplot(tC,aes(time, Concentration)) +\n        geom_line() +\n        ggtitle(\"Antibiotic concentration\\n\") +\n        xlim(min(tV$time,tC$time),max(tV$time,tC$time)) +\n        labs(y = paste(\"Concentration\",c.units),x = \"Time, h\") +\n        theme(axis.title.x = element_text(size=9),axis.title.y = element_text(size=9), plot.title = element_text(face=\"bold\")) +\n        ylim(0,maxCS)\n    }else{\n      tplotC <- ggplot(tC[tC$Concentration > MIC/10,],aes(time, Concentration/MIC)) +\n        geom_line() +\n        ggtitle(\"Antibiotic concentration\\n\") +\n        xlim(min(tV$time,tC$time),max(tV$time,tC$time)) +\n        labs(y = bquote('xMIC ('~log[2]~' scale)'),x = \"Time, h\") +\n        theme(axis.title.x = element_text(size=9),axis.title.y = element_text(size=9), plot.title = element_text(face=\"bold\")) +\n        ylim(0,maxCS/MIC) +\n        scale_y_continuous(trans='log2',breaks = geomSeries(base=2, max=maxCS/MIC)) +\n        theme_bw()\n    }\n    tC$panel <- \"Concentration\"\n\n    tV$panel <- \"OD\"\n    tplotV <- ggplot(tV,aes(time, value)) +\n      geom_line() +\n      geom_point(aes(color = pump), size=p.size) +\n      ggtitle(paste0(\"OD \",tube,\"\\n\")) +\n      xlim(min(tV$time,tC$time),max(tV$time,tC$time)) +\n      labs(y = \"OD\",x = \"Time, h\") +\n      theme(axis.title.x = element_text(size=9),axis.title.y = element_text(size=9), plot.title = element_text(face=\"bold\")) +\n      theme_bw() +\n      scale_color_manual(values = c(\"green2\",\"red2\"))\n\n    if( add.model == T){\n      model.table$time.mut = model.table$time.mut/3600\n      tplotV <- tplotV +\n        geom_line(data = model.table, aes(time.mut, value.mut),colour = \"blue\") +\n        geom_label(aes(x = 50, y = 0.1, label = paste(\"P(mutation) =\", formatC(m.prob, format = \"e\", digits = 2))))\n    }\n\n    if( length(params) != 0 ){\n      for( b in 1:dim(params[['bcs']])[1] ){\n        tplotV <- tplotV +\n          geom_vline(xintercept = params[['bcs']]$time[b], colour = \"blue\") +\n          annotate(\"text\", x=params[['bcs']]$time[b] - dist, label=paste0(\"bottle 1 = \", round(params[['bcs']]$Cp1[b]/MIC, 0), \"X, bottle 2 = \", round(params[['bcs']]$Cp2[b]/MIC, 0), \"X\"), y=0.3, colour=\"blue\", angle=90, size=2)\n\n        tplotC <- tplotC +\n          geom_vline(xintercept = params[['bcs']]$time[b], colour = \"blue\")\n      }\n\n      temp_dils =  params[['dils']][params[['dils']]$tube == tube,]\n\n      for( d in 1:dim(temp_dils)[1] ){\n        tplotV <- tplotV +\n          geom_vline(xintercept = temp_dils$time[d], colour = \"red\") +\n          annotate(\"text\", x=temp_dils$time[d] + dist, label=paste0(\"sample collection \", round(temp_dils$time[d], 0), \"hrs\"), y=0.3, colour=\"red\", angle=90, size=2)\n\n        tplotC <- tplotC +\n          geom_vline(xintercept = temp_dils$time[d], colour = \"red\")\n      }\n\n    }\n\n    gC <- ggplotGrob(tplotC)\n    gV <- ggplotGrob(tplotV)\n    for(j in 1:(ncol(gV) - ncol(gC))){\n      gC <- gtable::gtable_add_cols(gC, unit(0,\"mm\"))\n    }\n    g <- rbind(gV, gC, size=\"first\") # stack the two plots\n    g$widths <- unit.pmax(gC$widths, gV$widths)\n    g$layout[grepl(\"guide\", g$layout$name),c(\"t\",\"b\")] <- c(1,nrow(g))\n    grid.newpage()\n    pdf(paste0(tube,\".pdf\"))\n    grid.draw(g)\n    dev.off()\n  }\n}\n",
    "created" : 1541021357799.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3158220519",
    "id" : "E79F0E3E",
    "lastKnownWriteTime" : 1541098060,
    "last_content_update" : 1541098060,
    "path" : "~/Documents/WORK/Genomics/Tasks/Task20 (Experimental Evolution)/Protocols/MoRbido/R/draw.R",
    "project_path" : "R/draw.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}